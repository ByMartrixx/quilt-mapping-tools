{
  parserClass = 'org.quiltmc.mapping.intellij.language.QuiltMappingParser'

  extends = 'com.intellij.extapi.psi.ASTWrapperPsiElement'

  psiClassPrefix = 'QuiltMapping'
  psiImplClassSuffix = 'Impl'
  psiPackage = 'org.quiltmc.mapping.intellij.language.psi'
  psiImplPackage = 'org.quiltmc.mapping.intellij.language.psi.impl'

  elementTypeHolderClass = 'org.quiltmc.mapping.intellij.language.psi.QuiltMappingTypes'
  elementTypeClass = 'org.quiltmc.mapping.intellij.language.psi.QuiltMappingElementType'
  tokenTypeClass = 'org.quiltmc.mapping.intellij.language.psi.QuiltMappingTokenType'

  tokens = [
    LBRACE='{'
    RBRACE='}'
    LBRACKET='['
    RBRACKET=']'

    COMMA=','
    COLON=':'
    COMMENT='regexp://.*'
    BLOCK_COMMENT='regexp:/\*([^*]|\*+[^*/])*(\*+/)?'
    // escaped new lines are checked in the SyntaxHighlighter (TODO)
    DOUBLE_QUOTED_STRING="regexp:\"[^\"]*\"?"
    SINGLE_QUOTED_STRING="regexp:'[^']*'?"

    // [-+]? ( 0[xX][A-Fa-f0-9]+ | ( \d+\.?\d* | \.\d+ ) ([eE][-+]?\d*)? )
    // <optional sign> ( <hexadecimal> | <decimal> )
    //   optional sign - [-+]?
    //   hexadecimal - 0[xX][A-Fa-f0-9]+
    //   decimal - ( \d+\.?\d* | \.\d+ ) ([eE][-+]?\d*)?
    //     - ( <double> | <leading decimal point double> ) <optional exponent>
    //     double - \d+\.?\d*
    //     leading decimal point double - \.\d+
    //     optional exponent - ([eE][-+]?\d*)?
    NUMBER='regexp:[-+]?(0[xX][A-Fa-f0-9]+|(\d+\.?\d*|\.\d+)([eE][-+]?\d*)?)'

    TRUE='true'
    FALSE='false'
    NULL='null'

    IDENTIFIER="regexp:[A-Za-z][A-Za-z0-9_$]*"

    space = 'regexp:\s+' // ignore whitespace?
  ]

  extends("container|literal|identifier_expression") = value
  extends("array|object") = container
  extends("string_literal|number_literal|boolean_literal|null_literal") = literal
}

root ::= object

// objects
object ::= '{' object_element* '}' { pin = 1 }
private object_element ::= property (',' | &'}') { pin = 1; recoverWhile = recover_object }

// properties
property ::= property_name (':' property_value) { pin(".*") = 1 }
private property_name ::= literal | identifier_expression
private property_value ::= value

// arrays
array ::= '[' array_element* ']' { pin=1 }
private array_element ::= value (',' | &']') { pin = 1; recoverWhile = recover_array }

// literals
string_literal ::= SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING
number_literal ::= NUMBER
boolean_literal ::= TRUE | FALSE
null_literal ::= NULL

identifier_expression ::= IDENTIFIER

literal ::= string_literal | number_literal | boolean_literal | null_literal

fake container ::=

value ::= object | array | literal | identifier_expression

// recoveries
private recover_object ::= !('}' | value)
private recover_array ::= !(']' | value)
